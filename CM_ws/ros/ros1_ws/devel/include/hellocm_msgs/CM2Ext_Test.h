// Generated by gencpp from file hellocm_msgs/CM2Ext_Test.msg
// DO NOT EDIT!


#ifndef HELLOCM_MSGS_MESSAGE_CM2EXT_TEST_H
#define HELLOCM_MSGS_MESSAGE_CM2EXT_TEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hellocm_msgs
{
template <class ContainerAllocator>
struct CM2Ext_Test_
{
  typedef CM2Ext_Test_<ContainerAllocator> Type;

  CM2Ext_Test_()
    : test1(0.0)  {
    }
  CM2Ext_Test_(const ContainerAllocator& _alloc)
    : test1(0.0)  {
  (void)_alloc;
    }



   typedef double _test1_type;
  _test1_type test1;





  typedef boost::shared_ptr< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> const> ConstPtr;

}; // struct CM2Ext_Test_

typedef ::hellocm_msgs::CM2Ext_Test_<std::allocator<void> > CM2Ext_Test;

typedef boost::shared_ptr< ::hellocm_msgs::CM2Ext_Test > CM2Ext_TestPtr;
typedef boost::shared_ptr< ::hellocm_msgs::CM2Ext_Test const> CM2Ext_TestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator1> & lhs, const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator2> & rhs)
{
  return lhs.test1 == rhs.test1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator1> & lhs, const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hellocm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1544912b023f841df84f892fda2b3c07";
  }

  static const char* value(const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1544912b023f841dULL;
  static const uint64_t static_value2 = 0xf84f892fda2b3c07ULL;
};

template<class ContainerAllocator>
struct DataType< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hellocm_msgs/CM2Ext_Test";
  }

  static const char* value(const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 test1\n"
;
  }

  static const char* value(const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CM2Ext_Test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hellocm_msgs::CM2Ext_Test_<ContainerAllocator>& v)
  {
    s << indent << "test1: ";
    Printer<double>::stream(s, indent + "  ", v.test1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLOCM_MSGS_MESSAGE_CM2EXT_TEST_H
